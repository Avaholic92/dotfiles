# .bashrc
# 

# --- MODE
set -o vi

# --- EDITOR
export EDITOR="vim"

# Color LS output
export LS_OPTIONS="--color=auto"
export CLICOLOR="Yes"
export LSCOLOR=""

# --- PATH
export PATH=$HOME/workspace/python2/bin:/usr/local/scripts/:$PATH

# --- GIT CURRENT BRANCH
function parse_git_branch() {
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=`parse_git_dirty`
    echo "[${BRANCH}${STAT}]"
  else
    echo ""
  fi
}

# --- GIT REPO STATUS
function parse_git_dirty {
  status=`git status 2>&1 | tee`
  dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
  untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
  ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
  newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
  renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
  deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
  bits=''
  if [ "${renamed}" == "0" ]; then
    bits=">${bits}"
  fi
  if [ "${ahead}" == "0" ]; then
    bits="*${bits}"
  fi
  if [ "${newfile}" == "0" ]; then
    bits="+${bits}"
  fi
  if [ "${untracked}" == "0" ]; then
    bits="?${bits}"
  fi
  if [ "${deleted}" == "0" ]; then
    bits="x${bits}"
  fi
  if [ "${dirty}" == "0" ]; then
    bits="!${bits}"
  fi
  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo ""
  fi
												   }
# --- PROMPT
#export PS1="[\[\e[32m\]\u\[\e[m\]@\H:\W \[\e[33m\]\`parse_git_branch\`\[\e[m\]]\\$ "
if [ -n "$SSH_CONNECTION" ]; then
   export PS1="\[$(tput setaf 1)\]┌─╼ [$(tput setaf 7)\] \u \[$(tput setaf 1)\]╺─╸\[$(tput setaf 7)\] \H \[$(tput setaf 7)\][\w]\`parse_git_branch\` \n\[$(tput setaf 1)\]\$(if [[ \$? == 0 ]]; then echo \"\[$(tput setaf 1)\]└────╼ \[$(tput setaf 7)\][ssh]\"; else echo \"\[$(tput setaf 1)\]└╼ \[$(tput setaf 7)\][ssh]\"; fi) \[$(tput setaf 7)\]"
else
   export PS1="\[$(tput setaf 1)\]┌─╼\[$(tput setaf 3)\] \u\[$(tput setaf 1)\] ╺─╸\[$(tput setaf 1)\] \H \[$(tput setaf 7)\][\[$(tput setaf 5)\]\w\[$(tput setaf 7)\]]\`parse_git_branch\`\"n\[$(tput setaf 1)\]\$(if [[ \$? == 0 ]]; then echo \"\[$(tput setaf 1)\]└────╼\"; else echo \"\[$(tput setaf 1)\]└╼\"; fi) \[$(tput setaf 7)\]"
fi

# --- ALIASES
_myos="$(uname)"
case $_myos in
   Darwin)
      alias gvim="/Applications/MacVim.app/Contents/bin/vim -g"
      alias htop="sudo htop" 
      alias brewup="brew update;brew upgrade;brew prune;brew cleanup;brew doctor"
      ;;
   Linux)
      alias bbp='sudo bleachbit -p $(cat /home/$SUDO_USER/cleaners)'
      alias bbc='sudo bleachbit -c $(cat /home/$SUDO_USER/cleaners)'
      ;;

   *)
      ;;
esac

alias cat='bat'
alias ls='ls -lh'
alias grep='grep'
alias egrep='egrep'
alias fgrep='fgrep'
alias du='du -sch'
alias tree='tree -a -c'
alias whois='whois -H'
alias powershell="pwsh"
alias mv="mv -v"
alias rm="rm -v"
alias cp="cp -v"
alias youtube-dl-playlist="youtube-dl -f mp4 -wv --ignore-errors --output '%(playlist)s/%(playlist_index)s- %(title)s.%(ext)s'"
alias youtuve-dl="youtube-dl -f mp4 -wv --ignore-errors --output '%(title)s.%(ext)s'"
alias hbget="python /usr/local/scripts/hbget"
alias dd="dd status=progress"
alias blah="echo hello bash"

source ~/dotfiles/shells/bash/bash-functions
